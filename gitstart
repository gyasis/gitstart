#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-12-18
###########################

unset github_username dir repo license_url

script_name=$(basename "$0")
dir=""
version="0.3.0"
provider="github"  # default to github for backward compatibility
gitlab_group=""    # GitLab group/namespace
gitstart_config=$HOME/.gitstart_config

usage() {
    cat <<EOF

Script name: $script_name

Description:
============

This script automate creating git repo.
This will create a dir, add a license, README file, run git init and push to GitHub or GitLab. 

If a language is added, it will try to add the .gitignore.
Choose SSH as the default git protocol.

For GitLab, you can specify a group/namespace using -g flag or GITSTART_GITLAB_GROUP environment variable. The script will guide you through setup if neither is configured.

List of .gitignore supported by Github
======================================

See https://github.com/github/gitignore

Usage:
======

$script_name [ -l | --lang programming_language ] [ -d | --dir directory ] [ --github | --gitlab ] [ -g | --group group_name ] [ -h | --help | -v | --version]

Examples:
=========

    $script_name -d newrepo
    $script_name -d newrepo -l python 
    $script_name -d newrepo --gitlab
    $script_name -d newrepo -l python --github
    $script_name -d newrepo --gitlab -g proddev4/data
    # in a directory
    $script_name -d .
    # Show help
    $script_name -h
    # Show version
    $script_name -v
    
Environment Variables:
=====================

GITSTART_GITLAB_GROUP - Default GitLab group/namespace (e.g., "proddev4/data")
                       Note: The -g flag overrides this environment variable
EOF
}

while (($# > 0)); do # while arguments count>0
    case "$1" in
    -l | --lang)
        prog_lang=$2
        shift 2
        ;;
    -d | --dir)
        dir=$2
        shift 2
        ;;
    --github)
        provider="github"
        shift
        ;;
    --gitlab)
        provider="gitlab"
        shift
        ;;
    -g | --group)
        gitlab_group=$2
        shift 2
        ;;
    -h | --help)
        usage
        exit
        ;;
    -v | --version)
        echo ${version}
        exit
        ;;
    *) # unknown flag/switch
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done

##### check
# Check for required CLI tool based on provider
if [[ "$provider" == "github" ]]; then
    if [ ! "$(command -v gh)" ]; then
        echo "Please install gh from https://github.com/cli/cli#installation."
        exit 1
    fi
elif [[ "$provider" == "gitlab" ]]; then
    if [ ! "$(command -v glab)" ]; then
        echo "Please install glab from https://gitlab.com/gitlab-org/cli/-/releases"
        exit 1
    fi
fi

if [ ! "$(command -v jq)" ]; then
    echo "Please install jq from https://stedolan.github.io/jq/."
    exit 1
fi

############# Main body ############
# Since SSH keys are configured, we skip auth checks and proceed directly

# Set GitLab group/namespace from environment variable if not specified via flag
if [[ "$provider" == "gitlab" && -z "$gitlab_group" ]]; then
    gitlab_group="${GITSTART_GITLAB_GROUP:-}"
fi

# Show GitLab configuration status
if [[ "$provider" == "gitlab" && -n "$gitlab_group" ]]; then
    if [[ -n "${GITSTART_GITLAB_GROUP:-}" && "$gitlab_group" == "$GITSTART_GITLAB_GROUP" ]]; then
        echo "✅ Using GitLab group from environment: $gitlab_group"
    else
        echo "✅ Using GitLab group from -g flag: $gitlab_group"
    fi
    echo ""
fi

# Warning and guidance for GitLab without group configuration
if [[ "$provider" == "gitlab" && -z "$gitlab_group" ]]; then
    echo "⚠️  WARNING: No GitLab group/namespace specified!"
    echo ""
    echo "GitLab repos will be created under your personal namespace."
    echo "For organizational use, consider setting up a group/namespace:"
    echo ""
    echo "Option 1: Use the -g flag:"
    echo "  gitstart -d your-repo-name --gitlab -g your-org/your-workspace"
    echo ""
    echo "Option 2: Set environment variable (recommended for teams):"
    echo "  export GITSTART_GITLAB_GROUP=\"your-org/your-workspace\""
    echo "  echo 'export GITSTART_GITLAB_GROUP=\"your-org/your-workspace\"' >> ~/.bashrc"
    echo ""
    echo "Examples:"
    echo "  - Company: export GITSTART_GITLAB_GROUP=\"acme-corp/engineering\""
    echo "  - Team:    export GITSTART_GITLAB_GROUP=\"frontend-team/projects\""
    echo "  - Dept:    export GITSTART_GITLAB_GROUP=\"marketing/campaigns\""
    echo ""
    printf "Continue with personal namespace? (y/n): "
    read -r continue_choice
    case "$continue_choice" in
        [Yy]|[Yy][Ee][Ss])
            echo ">>> Continuing with personal GitLab namespace..."
            ;;
        *)
            echo ">>> Setup cancelled. Please configure your group and try again."
            exit 0
            ;;
    esac
    echo ""
fi

# Directory path. If dir is . then use pwd
if [[ ${dir} = "." ]]; then
    dir=$(pwd)
else
    echo ">>> Creating ${dir}."
    dir="$(pwd)/$dir"
    # mkdir -p "$dir" || exit
    # cd "$dir" || exit
fi

# don't allow to create a git repo in the ~ (HOME)
if [[ (${dir} = "$HOME") ]]; then
    echo "This script doesn't allow to create a git repo in the home directory."
    echo "Use another directory."
    exit 1
fi

get_username() {
    local provider_name="$1"
    local config_file="$2"
    local default_username="$3"
    
    if [ ! -s "$config_file" ]; then
        if [[ -n "$default_username" ]]; then
            printf "Please type your %s username [%s]: " "$provider_name" "$default_username" >&2
            read -r username
            username=${username:-$default_username}
        else
            printf "Please type your %s username. " "$provider_name" >&2
            read -r username
        fi
        echo "$username" >"$config_file"
        echo "$username"
    else
        username=$(cat "$config_file")
        printf "Is it correct your %s username is %s? y/yes/n/no: " "$provider_name" "$username" >&2
        read -r ANS
        ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [[ $ans = "Y" ]]; then
            echo "$username"
        else
            if [[ -n "$default_username" ]]; then
                printf "Please type your %s username [%s]: " "$provider_name" "$default_username" >&2
                read -r username
                username=${username:-$default_username}
            else
                printf "Please type your %s username. " "$provider_name" >&2
                read -r username
            fi
            echo "$username" >"$config_file"
            echo "$username"
        fi
    fi
}

# Get username based on provider
if [[ "$provider" == "github" ]]; then
    github_username=$(get_username "GitHub" "$gitstart_config" "gyasis")
elif [[ "$provider" == "gitlab" ]]; then
    gitlab_config="$HOME/.gitstart_config_gitlab"
    gitlab_username=$(get_username "GitLab" "$gitlab_config" "gyasis")
fi

repo=$(basename "${dir}")
license_url="mit"

# Display username and repo info based on provider
if [[ "$provider" == "github" ]]; then
    echo ">>> Your GitHub username is ${github_username}."
    current_username="$github_username"
elif [[ "$provider" == "gitlab" ]]; then
    echo ">>> Your GitLab username is ${gitlab_username}."
    current_username="$gitlab_username"
fi
echo ">>> Your new repo name is ${repo}."
echo ">>> Using provider: ${provider}"

# license
PS3='Your license: '
licenses=("MIT: I want it simple and permissive." "Apache License 2.0: I need to work in a community." "GNU GPLv3: I care about sharing improvements." "None" "Quit")

echo "Select a license: "
select license in "${licenses[@]}"; do
    case ${license} in
    "MIT: I want it simple and permissive.")
        echo "MIT"
        break
        ;;
    "Apache License 2.0: I need to work in a community.")
        echo "Apache"
        license_url="apache-2.0"
        break
        ;;
    "GNU GPLv3: I care about sharing improvements.")
        echo "GNU"
        license_url="lgpl-3.0"
        break
        ;;
    "None")
        echo "License None"
        license_url=false
        break
        ;;
    "Quit")
        echo "User requested exit."
        exit
        ;;
    *) echo "Invalid option $REPLY" ;;
    esac
done

if [ ! -d "$dir" ]; then
    mkdir -p "$dir"
fi

create_repo() {
    local provider="$1"
    local repo_name="$2"
    local visibility="$3"
    local group="$4"
    
    if [[ "$provider" == "github" ]]; then
        echo ">>> Creating GitHub repository..."
        if [[ "$visibility" == "public" ]]; then
            gh repo create "$repo_name" --public --clone
        else
            gh repo create "$repo_name" --private --clone
        fi
    elif [[ "$provider" == "gitlab" ]]; then
        echo ">>> Creating GitLab repository..."
        
        # Build glab command with group if specified
        local glab_cmd="glab repo create \"$repo_name\""
        
        if [[ -n "$group" ]]; then
            echo ">>> Using GitLab group/namespace: $group"
            glab_cmd="$glab_cmd -g \"$group\""
        fi
        
        case "$visibility" in
            "public")
                eval "$glab_cmd --public"
                ;;
            "private")
                eval "$glab_cmd --private"
                ;;
            "internal")
                eval "$glab_cmd --internal"
                ;;
        esac
    fi
}

# Get visibility preference for GitLab (GitHub only has public/private)
if [[ "$provider" == "gitlab" ]]; then
    echo ">>> You are using GitLab. Choose visibility:"
    PS3='Repository visibility: '
    visibilities=("Public" "Internal" "Private" "Quit")
    
    select visibility in "${visibilities[@]}"; do
        case ${visibility} in
            "Public")
                repo_visibility="public"
                break
                ;;
            "Internal")
                repo_visibility="internal"
                break
                ;;
            "Private")
                repo_visibility="private"
                break
                ;;
            "Quit")
                echo "User requested exit."
                exit
                ;;
            *) echo "Invalid option $REPLY" ;;
        esac
    done
else
    # GitHub - default to public for backward compatibility
    repo_visibility="public"
fi

# Create the remote repository
printf "Creating remote repo %s" "$dir"
create_repo "$provider" "$repo" "$repo_visibility" "$gitlab_group" || {
    echo "Not able to create a remote repo."
    exit 1
}

cd "$dir" || exit

# Configure Git user email and signing based on provider
if [[ "$provider" == "github" ]]; then
    git config user.email "gyasis@gmail.com"
    echo ">>> Configured Git email for GitHub: gyasis@gmail.com"
elif [[ "$provider" == "gitlab" ]]; then
    git config user.email "gyasi.sutton@herself-health.com"
    git config user.signingkey "96132160E21A89003E03337A0AC7D767310FB350"
    echo ">>> Configured Git email for GitLab: gyasi.sutton@herself-health.com"
    echo ">>> Configured GPG signing key for GitLab"
fi

# Initialize git and set up remote for GitLab (GitHub CLI handles this automatically)
if [[ "$provider" == "gitlab" ]]; then
    if [ ! -d ".git" ]; then
        echo ">>> Running git init."
        git init || {
            echo "Not able to initialize git."
            exit 1
        }
    fi
    
    # Check if remote already exists (glab might have added it)
    if ! git remote get-url origin >/dev/null 2>&1; then
        # Set up remote for GitLab
        if [[ -n "$gitlab_group" ]]; then
            remote_url="git@gitlab.com:${gitlab_group}/${repo}.git"
        else
            remote_url="git@gitlab.com:${current_username}/${repo}.git"
        fi
        
        echo ">>> Adding remote origin: $remote_url"
        git remote add origin "$remote_url" || {
            echo "Not able to add remote."
            exit 1
        }
    else
        echo ">>> Remote origin already configured."
    fi
fi

if [[ ${license_url} != false ]]; then
    touch "${dir}"/LICENSE
    curl -s "https://api.github.com/licenses/${license_url}" | jq -r '.body' >"${dir}"/LICENSE
    echo ">>> LICENSE is created."
fi

if [[ ${prog_lang} ]]; then
    # github gitignore url
    url=https://raw.githubusercontent.com/github/gitignore/master/"${prog_lang^}".gitignore
    # get the status http code, 200, 404 etc.
    http_status=$(curl --write-out '%{http_code}' --silent --output /dev/null "${url}")

    if [[ $http_status -eq 200 ]]; then
        # get argument e.g python, go etc, capitalize it
        echo ">>> Creating .gitignore for ${1^}..."
        # create .gitignore
        curl "${url}" -o .gitignore
        echo ">>> .gitignore created."
    else
        echo ">>> Not able to find ${1^} gitignore at https://github.com/github/gitignore."
        echo ">>> Adding .gitignore with minimum contents."
        touch "${dir}/.gitignore"
        echo ".DS_Store" >"${dir}/.gitignore"
    fi
else
    echo ">>> Adding .gitignore with minimum contents."
    touch "${dir}/.gitignore"
    echo ".DS_Store" >"${dir}/.gitignore"
fi

# README
echo ">>> Creating README.md."
printf "# %s \n
## Overview\n\n
## Requirement\n\n
## Usage\n\n
## Features\n\n
## Reference\n\n
## Author\n\n
## License

Please see license.txt.\n" "${repo}" >README.md

# git commands

echo ">>> Adding README.md and .gitignore."
git add . || {
    echo "Not able to add."
    exit 1
}
echo ">>> Commiting with a message 'first commit'."
if [[ "$provider" == "gitlab" ]]; then
    git commit -S -m "first commit" || {
        echo "Not able to commit."
        exit 1
    }
else
    git commit -m "first commit" || {
        echo "Not able to commit."
        exit 1
    }
fi
git branch -M main || {
    echo "Not able to add the branch"
    exit 1
}
git push -u origin main || {
    echo "Not able to push to a remote repo."
    exit 1
}

# Display success message with correct URL
if [[ "$provider" == "github" ]]; then
    echo ">>> You have created a GitHub repo at https://github.com/${current_username}/${repo}"
elif [[ "$provider" == "gitlab" ]]; then
    if [[ -n "$gitlab_group" ]]; then
        echo ">>> You have created a GitLab repo at https://gitlab.com/${gitlab_group}/${repo}"
    else
        echo ">>> You have created a GitLab repo at https://gitlab.com/${current_username}/${repo}"
    fi
fi

exit 0
